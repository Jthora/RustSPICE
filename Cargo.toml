[package]
name = "rust-spice"
version = "0.1.0"
edition = "2021"
description = "A fully converted (non-wrapped) version of CSPICE for Rust that works with WASM-TypeScript"
license = "CC0-1.0"
repository = "https://github.com/Jthora/RustSPICE"

[lib]
crate-type = ["cdylib", "rlib"]

[dependencies]
# WASM bindings and JavaScript interop
wasm-bindgen = { version = "0.2", features = ["serde-serialize"] }
js-sys = "0.3"
web-sys = { version = "0.3", optional = true, features = [
  "console",
  "Window",
  "Document",
] }

# Error handling and debugging for WASM
console_error_panic_hook = { version = "0.1", optional = true }
wee_alloc = { version = "0.4", optional = true }

# Mathematical and scientific computing
nalgebra = { version = "0.32", features = ["std"] }

# Serialization for kernel data
serde = { version = "1.0", features = ["derive"] }
serde_json = "1.0"
serde-wasm-bindgen = "0.6"

# Error handling
thiserror = "1.0"
anyhow = "1.0"

[dependencies.getrandom]
version = "0.2"
features = ["js"]

[build-dependencies]
# Generate bindings from C headers (optional - requires libclang)
bindgen = { version = "0.69", optional = true }

[dev-dependencies]
# Testing and benchmarking
criterion = { version = "0.5", features = ["html_reports"] }
proptest = "1.4"
insta = "1.34"
quickcheck = "1.0"
quickcheck_macros = "1.0"

# WASM testing
wasm-bindgen-test = "0.3"

[features]
default = ["console_error_panic_hook", "web-apis"]

# Optional features for different build targets
bindgen = ["dep:bindgen"]  # Enable automatic binding generation (requires libclang)
wee_alloc = ["dep:wee_alloc"]  # Use wee_alloc for smaller WASM size
f64 = []  # Use f64 precision throughout (default)
f32 = []  # Use f32 for smaller WASM size

# WASM-specific features
wasm-bindgen-serde = ["wasm-bindgen/serde-serialize"]
web-apis = ["dep:web-sys"]

[[bench]]
name = "ephemeris_benchmark"
harness = false

[profile.release]
# Tell `rustc` to optimize for small code size.
opt-level = "s"
lto = true
codegen-units = 1
panic = "abort"
strip = true

[profile.dev]
# Faster builds for development
opt-level = 0
debug = 2
incremental = true

[profile.bench]
# Optimize benchmarks for performance
opt-level = 3
debug = true

# Optimize dependencies even in debug builds
[profile.dev.package."*"]
opt-level = 1
